<!DOCTYPE html>
<html>
<head>
    <title>Zombie Apocalypse Simulator</title>
    <style>
        canvas {
            border: 2px solid #333;
            background: #1a1a1a;
        }
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: #2a2a2a;
            color: white;
            font-family: Arial;
        }
        #hud {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.7);
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div id="hud">
        <div>Время: <span id="timer">0</span>с</div>
        <div>Люди: <span id="humans">0</span></div>
        <div>Зомби: <span id="zombies">0</span></div>
        <div>Фаза: <span id="phase">Обычная</span></div>
    </div>
    <canvas id="gameCanvas"></canvas>

<script>
const CONFIG = {
    CELL_SIZE: 20,
    WIDTH: 800,
    HEIGHT: 600,
    FPS: 5,
    HUNT_DURATION: 60,
    COLORS: {
        human: '#FF0',
        zombie: '#0F0',
        necromancer: '#FD0',
        survivor: '#F00',
        scientist: '#FFF',
        healer: '#00F',
        object: '#000'
    },
    SPAWN_RATES: {
        humans: 0.85,
        objects: 0.15
    }
};

class ApocalypseSimulator {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.canvas.width = CONFIG.WIDTH;
        this.canvas.height = CONFIG.HEIGHT;
        
        this.grid = [];
        this.time = 0;
        this.huntPhase = false;
        this.huntEndTime = 0;
        this.scientist = null;
        this.healer = null;
        
        this.init();
        setInterval(() => this.update(), 1000/CONFIG.FPS);
    }

    init() {
        const cols = CONFIG.WIDTH / CONFIG.CELL_SIZE;
        const rows = CONFIG.HEIGHT / CONFIG.CELL_SIZE;

        // Инициализация сетки
        for(let y = 0; y < rows; y++) {
            this.grid[y] = [];
            for(let x = 0; x < cols; x++) {
                const rand = Math.random();
                this.grid[y][x] = rand < CONFIG.SPAWN_RATES.objects ? 
                    {type: 'object'} : 
                    {type: 'human', survivalTime: 0};
            }
        }

        // Добавление некроманта
        const necroPos = this.getRandomEmptyCell();
        this.grid[necroPos.y][necroPos.x] = {type: 'necromancer'};
    }

    update() {
        this.time += 1/CONFIG.FPS;
        
        this.convertHumansToZombies();
        this.checkSurvivors();
        this.checkScientist();
        this.handleHuntPhase();
        this.checkVictory();
        
        this.draw();
        this.updateHUD();
    }

    convertHumansToZombies() {
        const necro = this.findEntity('necromancer');
        if(!necro) return;

        for(let dy = -3; dy <= 3; dy++) {
            for(let dx = -3; dx <= 3; dx++) {
                const x = necro.x + dx;
                const y = necro.y + dy;
                if(this.isValidCell(x, y) && this.grid[y][x].type === 'human') {
                    this.grid[y][x] = {type: 'zombie'};
                }
            }
        }
    }

    checkSurvivors() {
        for(let y = 0; y < this.grid.length; y++) {
            for(let x = 0; x < this.grid[y].length; x++) {
                const cell = this.grid[y][x];
                if(cell.type === 'human' && cell.survivalTime >= 60) {
                    this.grid[y][x] = {type: 'survivor'};
                    this.checkFortress(x, y);
                }
                if(cell.type === 'human') cell.survivalTime += 1/CONFIG.FPS;
            }
        }
    }

    checkFortress(x, y) {
        let objects = 0;
        for(let dy = -5; dy <= 5; dy++) {
            for(let dx = -5; dx <= 5; dx++) {
                if(this.grid[y + dy]?.[x + dx]?.type === 'object') objects++;
            }
        }
        
        if(objects >= 60 && !this.scientist) {
            this.grid[y][x] = {type: 'scientist'};
            this.scientist = {x, y};
            this.startHuntPhase();
        }
    }

    startHuntPhase() {
        this.huntPhase = true;
        this.huntEndTime = this.time + CONFIG.HUNT_DURATION;
    }

    handleHuntPhase() {
        if(!this.huntPhase) return;
        
        // Движение ученого
        if(this.scientist) {
            const nearestZombie = this.findNearestZombie(this.scientist.x, this.scientist.y);
            if(nearestZombie) {
                const move = this.calculateEscapeDirection(this.scientist, nearestZombie);
                this.moveEntity(this.scientist, move);
            }
        }

        // Атака зомби
        this.grid.forEach((row, y) => {
            row.forEach((cell, x) => {
                if(cell.type === 'zombie' && this.huntPhase) {
                    this.zombieAI(x, y);
                }
            });
        });

        if(this.time >= this.huntEndTime) {
            this.endHuntPhase();
        }
    }

    endHuntPhase() {
        this.huntPhase = false;
        if(this.scientist) {
            this.grid[this.scientist.y][this.scientist.x] = {type: 'healer'};
            this.healer = {x: this.scientist.x, y: this.scientist.y};
            this.scientist = null;
        }
    }

    healZombies() {
        if(!this.healer) return;

        for(let dy = -3; dy <= 3; dy++) {
            for(let dx = -3; dx <= 3; dx++) {
                const x = this.healer.x + dx;
                const y = this.healer.y + dy;
                if(this.isValidCell(x, y) && this.grid[y][x].type === 'zombie') {
                    this.grid[y][x] = {type: 'human', survivalTime: 0};
                }
            }
        }
    }

    checkVictory() {
        const zombies = this.countEntities('zombie');
        const humans = this.countEntities('human') + this.countEntities('survivor');
        
        if(zombies === 0) {
            alert('ПОБЕДА ЛЮДЕЙ!');
            location.reload();
        }
        if(humans === 0) {
            alert('ПОБЕДА ЗОМБИ!');
            location.reload();
        }
    }

    draw() {
        this.ctx.clearRect(0, 0, CONFIG.WIDTH, CONFIG.HEIGHT);
        
        this.grid.forEach((row, y) => {
            row.forEach((cell, x) => {
                this.ctx.fillStyle = CONFIG.COLORS[cell.type];
                this.ctx.fillRect(
                    x * CONFIG.CELL_SIZE,
                    y * CONFIG.CELL_SIZE,
                    CONFIG.CELL_SIZE,
                    CONFIG.CELL_SIZE
                );
            });
        });
    }

    updateHUD() {
        document.getElementById('timer').textContent = Math.floor(this.time);
        document.getElementById('humans').textContent = 
            this.countEntities('human') + this.countEntities('survivor');
        document.getElementById('zombies').textContent = this.countEntities('zombie');
        document.getElementById('phase').textContent = 
            this.huntPhase ? 'ОХОТА!' : 'Обычная';
    }

    // Вспомогательные методы
    getRandomEmptyCell() {
        let x, y;
        do {
            x = Math.floor(Math.random() * (CONFIG.WIDTH/CONFIG.CELL_SIZE));
            y = Math.floor(Math.random() * (CONFIG.HEIGHT/CONFIG.CELL_SIZE));
        } while(this.grid[y][x].type !== 'human');
        return {x, y};
    }

    isValidCell(x, y) {
        return x >= 0 && y >= 0 && 
               x < CONFIG.WIDTH/CONFIG.CELL_SIZE && 
               y < CONFIG.HEIGHT/CONFIG.CELL_SIZE;
    }

    findEntity(type) {
        for(let y = 0; y < this.grid.length; y++) {
            for(let x = 0; x < this.grid[y].length; x++) {
                if(this.grid[y][x].type === type) return {x, y};
            }
        }
        return null;
    }

    countEntities(type) {
        return this.grid.flat().filter(e => e.type === type).length;
    }

    findNearestZombie(x, y) {
        // ... реализация поиска ...
    }

    calculateEscapeDirection(pos, threat) {
        // ... логика движения ...
    }

    moveEntity(entity, direction) {
        // ... перемещение сущности ...
    }

    zombieAI(x, y) {
        // ... ИИ зомби ...
    }
}

window.addEventListener('load', () => new ApocalypseSimulator());
</script>
</body>
</html>
